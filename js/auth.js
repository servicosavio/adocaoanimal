/* auth.js - simples auth usando localStorage (apenas para testes/ensino)
   Atualizado por: S√°vio S√©rgio (ajustes e usu√°rios de teste)
*/
const Auth = (function () {
  const LS_KEY = 'projeto_usuarios_v1';
  const LOGGED_KEY = 'projeto_usuario_logado';

  function _getUsers() {
    const raw = localStorage.getItem(LS_KEY);
    if (!raw) return [];
    try {
      return JSON.parse(raw);
    } catch (e) {
      console.error('Erro ao parsear usu√°rios do localStorage', e);
      return [];
    }
  }

  function _saveUsers(users) {
    localStorage.setItem(LS_KEY, JSON.stringify(users));
  }

  function _findByEmail(email) {
    const users = _getUsers();
    return users.find(u => u.email.toLowerCase() === (email || '').toLowerCase());
  }

  // Usu√°rios de exemplo fornecidos (senhas em texto claro s√≥ para ambiente de testes)
  const SAMPLE_USERS = [
    // N√≠vel 1: A Senha "Tapete" (S√≥ n√∫meros, 8+ chars)
    {
      nome: 'Dona Zilda (Iniciante)',
      email: 'zilda@email.com',
      senha: '12345678', // Agora com 8 d√≠gitos
      nivel: 1,
      msgSucesso: 'Voc√™ entrou! ü•≥ Mas cuidado: a senha "12345678" √© longa, mas por ter s√≥ n√∫meros, ainda √© muito f√°cil de adivinhar!'
    },

    // N√≠vel 2: A Senha "B√°sica" (S√≥ letras min√∫sculas, 8+ chars)
    {
      nome: 'Seu Jorge (Aprendiz)',
      email: 'jorge@email.com',
      senha: 'bobzinhobob', // Mais de 8, mas s√≥ min√∫sculas
      nivel: 2,
      msgSucesso: 'Deu certo! üòÑ "bobzinhobob" √© f√°cil de lembrar, mas por ter s√≥ letras min√∫sculas, ainda √© fraca. Falta misturar!'
    },

    // N√≠vel 3: A Senha "Forte" (Mix: Mai√∫scula + Min√∫scula + N√∫mero)
    {
      nome: 'Ana (Segura)',
      email: 'ana@email.com',
      senha: 'BoloDeFuba10', // Excelente!
      nivel: 3,
      msgSucesso: 'Muito bem! üëè "BoloDeFuba10" √© uma senha forte! Mistura letras mai√∫sculas, min√∫sculas e n√∫meros.'
    },

    // N√≠vel 4: A Senha "Mestre" (Mix: Mai√∫scula + Min√∫scula + S√≠mbolo)
    {
      nome: 'Carlos (Mestre Ninja)',
      email: 'carlos@email.com',
      senha: 'MeuGatoFazMiau!', // A sua nova senha!
      nivel: 4,
      msgSucesso: 'PERFEITO! üèÜ "MeuGatoFazMiau!" √© uma senha Mestre! Usar uma frase com um s√≠mbolo no final √© uma t√©cnica excelente!'
    }
  ];

  function seedSampleUsers() {
    const users = _getUsers();
    let added = 0;

    SAMPLE_USERS.forEach(sample => {
      const exists = users.some(u => u.email.toLowerCase() === sample.email.toLowerCase() || u.usuario === sample.usuario);
      if (!exists) {
        users.push({ nome: sample.nome, usuario: sample.usuario, email: sample.email, senha: sample.senha });
        added++;
      }
    });

    if (added > 0) {
      _saveUsers(users);
      console.info(`seedSampleUsers: ${added} usu√°rio(s) de teste adicionados.`);
    } else {
      console.info('seedSampleUsers: nenhum usu√°rio novo necess√°rio (j√° existem).');
    }
  }

  function loginUser(email, senha) {
    if (!email || !senha) return { ok: false, message: 'Preencha e-mail e senha.' };
    const user = _findByEmail(email);
    if (!user) return { ok: false, message: 'Usu√°rio n√£o encontrado.' };
    if (user.senha !== senha) return { ok: false, message: 'Senha incorreta.' };

    // marca como logado (simples)
    localStorage.setItem(LOGGED_KEY, JSON.stringify({ email: user.email, usuario: user.usuario, nome: user.nome, ts: Date.now() }));
    return { ok: true, message: 'Logado com sucesso', user };
  }

  function registerUser(data) {
    // espera { nome, email, senha, "confirm-senha", termos }
    const nome = (data.nome || '').trim();
    const email = (data.email || '').trim();
    const senha = data.senha || '';
    const confirm = data['confirm-senha'] || '';
    const termos = data.termos;

    if (nome.length < 2) return { ok: false, message: 'Nome deve ter pelo menos 2 caracteres.' };
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) return { ok: false, message: 'E-mail inv√°lido.' };
    if (senha.length < 8) return { ok: false, message: 'Senha deve ter ao menos 8 caracteres.' };
    if (senha !== confirm) return { ok: false, message: 'As senhas n√£o coincidem.' };
    if (!termos) return { ok: false, message: 'Voc√™ deve aceitar os termos.' };

    const users = _getUsers();
    if (users.some(u => u.email.toLowerCase() === email.toLowerCase())) {
      return { ok: false, message: 'J√° existe uma conta com esse e-mail.' };
    }

    // gerar username simples (nome + n√∫mero)
    let baseUser = nome.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, '').replace(/\s+/g, '.');
    let usuario = baseUser;
    let counter = 1;
    while (users.some(u => u.usuario === usuario)) {
      usuario = `${baseUser}${counter}`;
      counter++;
    }

    const novo = { nome, usuario, email, senha };
    users.push(novo);
    _saveUsers(users);
    return { ok: true, message: 'Usu√°rio criado', user: novo };
  }

  function logout() {
    localStorage.removeItem(LOGGED_KEY);
  }

  function getLoggedUser() {
    const raw = localStorage.getItem(LOGGED_KEY);
    if (!raw) return null;
    try { return JSON.parse(raw); } catch { return null; }
  }

  // Fun√ß√£o √∫til para debug: listar todos os usu√°rios (apenas ambiente local)
  function getAllUsers() {
    return _getUsers();
  }

  return {
    seedSampleUsers,
    loginUser,
    registerUser,
    logout,
    getLoggedUser,
    getAllUsers
  };
})();

// export para scripts inline (compatibilidade)
window.Auth = Auth;
